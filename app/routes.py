import os
import logging
from flask import Blueprint, request, jsonify, session, current_app, render_template
from hashlib import sha256
import hmac
import json
from datetime import datetime

from app import db                 # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app.models import User        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

main = Blueprint('main', __name__)

logger = logging.getLogger(__name__)

# –ú–∞—Ä—à—Ä—É—Ç API –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Mini App (WebApp)
@main.route('/auth', methods=['POST'])
def auth():
    data = request.get_json()
    if not data or 'initData' not in data:
        logger.warning("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ (initData) –≤ –∑–∞–ø—Ä–æ—Å–µ")
        return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'}), 400

    init_data = data['initData']
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å /auth, –¥–ª–∏–Ω–∞ initData = {len(init_data)} —Å–∏–º–≤–æ–ª–æ–≤")

    from urllib.parse import parse_qsl
    params_list = parse_qsl(init_data, keep_blank_values=True)
    params = {k: v for k, v in params_list}

    recv_hash = params.pop('hash', None)
    if not recv_hash:
        logger.warning("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä hash")
        return jsonify({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'}), 400

    data_check_arr = [f"{k}={v}" for k, v in sorted(params.items())]
    data_check_string = "\n".join(data_check_arr)

    token = current_app.config['TELEGRAM_BOT_TOKEN']
    secret_key = hmac.new(b'WebAppData', token.encode('utf-8'), digestmod=sha256).digest()
    calc_hash = hmac.new(secret_key, data_check_string.encode('utf-8'), digestmod=sha256).hexdigest()

    if calc_hash != recv_hash:
        logger.warning(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: —Ö—ç—à –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç (–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π: {calc_hash}, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π: {recv_hash})")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö'}), 403

    try:
        auth_date = int(params.get('auth_date', 0))
    except ValueError as e:
        logger.error(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è auth_date: {e}")
        auth_date = 0
    if auth_date == 0 or datetime.utcnow().timestamp() - auth_date > 24 * 3600:
        logger.warning(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (auth_date={auth_date})")
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏'}), 403

    user_json = params.get('user')
    try:
        telegram_user = json.loads(user_json) if user_json else {}
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telegram_user}")
    except json.JSONDecodeError as e:
        logger.error(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ JSON –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –ø–æ–ª—è user: {e}")
        return jsonify({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}), 400

    telegram_id = telegram_user.get('id')
    if not telegram_id:
        logger.error("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return jsonify({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}), 400

    username = telegram_user.get('username')
    first_name = telegram_user.get('first_name')
    last_name = telegram_user.get('last_name')
    language_code = telegram_user.get('language_code')

    # –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User.query.filter_by(telegram_id=telegram_id).first()
    if user:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ")
        # –°–æ—Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ last_test_id, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –µ–≥–æ
        last_test = user.last_test_id
        user.username = username
        user.first_name = first_name
        user.last_name = last_name
        user.language_code = language_code
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ last_test_id, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        if last_test:
            user.last_test_id = last_test
    else:
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: Telegram ID {telegram_id}, username {username}")
        user = User(
            telegram_id=telegram_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            language_code=language_code
        )
        db.session.add(user)

    try:
        db.session.commit()
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user.id}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'}), 500

    from flask_login import login_user
    login_user(user)

    session['user_id'] = user.id
    session['telegram_id'] = user.telegram_id
    logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è Telegram ID {telegram_id} (user.id: {user.id})")
    return jsonify({'status': 'ok'})



# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@main.route('/profile')
def profile():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
    current_user = None
    if 'user_id' in session:
        current_user = User.query.get(session['user_id'])
    if current_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äì —Ä–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–æ—Ñ–∏–ª—å
        return render_template('profile.html', user=current_user)
    else:
        logger.info("üîí –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /profile –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
        return render_template('profile.html', user=None)

# –ë–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (__main__) —É–¥–∞–ª—ë–Ω.
# –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ñ–∞–π–ª run.py


@main.route('/vacancies')
def vacancies():
    return render_template('vacancies/index.html')

@main.route('/english')
def english():
    return render_template('english/index.html')

@main.route('/store')
def store():
    return render_template('store/index.html')